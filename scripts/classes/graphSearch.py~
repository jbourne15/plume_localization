#!/usr/bin/env python

import rospy
from std_msgs.msg import String
from std_msgs.msg import Float64MultiArray, Int16MultiArray
from geometry_msgs.msg import PointStamped
import heapq
import numpy as np
import math
import operator

_ACTIONS = [('N', [-1,0]),('E', [0,1]),('S',[1,0]),('W',[0,-1]),('NE',[-1,1]),('NW',[-1,-1]),\
            ('SE',[1,1]),('SW',[1,-1]), ('STAY',[0,0])]

class Astar():

    def __init__(self,width=100,height=100, resolution=100):
        self.frontier = []

        # self.width = rospy.get_param("height", 100)
        # self.height = rospy.get_param("width", 100)
        
        self.width = width
        self.height = height
        self.resolution = resolution
        self.spacing = 1.0*self.width/self.resolution
        # print 'space:',self.spacing
        self.state = None
        self.setGoal = None

       
        
    def runAstar(self):

        # set init state, no action, cost
        
        # n0 = ((start_x,start_y), 'None', 0)
        # print 's0',self.state
        


        self.state =tuple([np.round(self.spacing*x) for x in self.state])
        n0 = (self.state, 'None', 0)

        if self.setGoal is not None:
            self.goal = self.setGoal

        if self.isGoalState(n0[0]):
            return

        frontier = PriorityQueue() # this is my search stack
        visited  = [] # this is my visited list
        frontier.push(n0,0)
                     #child,Parent
        parentMap   = {n0:None}
        action = []
        lpc = 0

        while len(frontier.heap)>0:
            ni = frontier.pop()
            cost_to_node = self.getCost(ni,parentMap)
            if (ni[0], ni[1]) not in visited:
                visited.append((ni[0], ni[1], 0))
                if self.isGoalState(ni[0]):
                    action = self.getPath(ni,parentMap) # this methods sets policy for the states as well see method           
                    self.S2A[self.goal] = 'STAY'
                    return self.S2A
                else:
                    for i in self.getSuccessors(ni[0]):
                        if i not in visited:
                            cost = i[2] + cost_to_node + self.heuristic(i[0])
                            frontier.push(i,cost)
                            parentMap[i] = ni
            lpc = lpc +1


    def getCost(self, n,parentMap):
        cost = n[2]
        while (n[1] != 'None'):
            n = parentMap[n]
            cost = cost + n[2]
        return cost

    def getPath(self, n,parentMap):
        curr = n
        action = []
        states = []
        while (curr != None):
            action.append(curr[1])
            states.append(curr[0])

            curr = parentMap[curr]
        action.reverse()
        action.remove('None')
        states.reverse()

        self.S2A = {states[0]:action[0]} # setting the policy
        for si,ai in zip(states, action):
            self.S2A[si] =ai
        
    def isGoalState(self, ni):
        # print self.goal, ni
        if ni == self.goal:
            return True
        else:
            return False

    def getSuccessors(self,ni):
        state = ni
        childrenList = []
        # import pdb; pdb.set_trace()
        for a,i in _ACTIONS:
            statei = tuple(map(operator.add, state, tuple(i)))            
            if statei == state:
                t = 'dont add this state'
            else:
                if statei[0]>=self.width or statei[0]<0 or statei[1]>=self.width or statei[1]<0:
                    t = 'out of bounds'
                else:
                    childrenList.append((statei,a,1))

        return childrenList

    def heuristic(self,state):
        heuristic = math.fabs(self.goal[0]-state[0])+math.fabs(self.goal[1]-state[1]) # manhattan distance
        return heuristic

    def set_state(self, state):
        self.state = state
        # print self.state

    def set_goal(self, goal):
        self.setGoal = list(goal)
        self.setGoal[0] = goal[1]
        self.setGoal[1] = goal[0] # have to switch around the x, y
        self.setGoal = tuple(self.setGoal)
        print 'goal changed to:', self.setGoal

    def get_action(self):
        # print self.state
        return self.S2A[self.state]

class PriorityQueue:
    """
      Implements a priority queue data structure. Each inserted item
      has a priority associated with it and the client is usually interested
      in quick retrieval of the lowest-priority item in the queue. This
      data structure allows O(1) access to the lowest-priority item.

      Note that this PriorityQueue does not allow you to change the priority
      of an item.  However, you may insert the same item multiple times with
      different priorities.

    """
    def  __init__(self):
        self.heap = []
        self.count = 0

    def push(self, item, priority):
        # FIXME: restored old behaviour to check against old results better
        # FIXED: restored to stable behaviour
        entry = (priority, self.count, item)
        # entry = (priority, item)
        heapq.heappush(self.heap, entry)
        self.count += 1

    def pop(self):
        (_, _, item) = heapq.heappop(self.heap)
        #  (_, item) = heapq.heappop(self.heap)
        return item

    def isEmpty(self):
        return len(self.heap) == 0



if __name__=="__main__":
    pathPlanner = Astar(100,100,100)
    pathPlanner.set_goal((0,0))
    pathPlanner.runAstar()
